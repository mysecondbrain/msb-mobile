name: Apply Patch and (optional) Build

on:
  workflow_dispatch:
    inputs:
      FILES_JSON:
        description: "JSON: [{\"path\":\"file\",\"content\":\"…\"}, …] – Dateien werden geschrieben/überschrieben"
        required: true
      BUILD:
        description: "EAS Build auslösen?"
        required: false
        default: "true"
      EAS_PROFILE:
        description: "EAS Build Profile (z.B. preview)"
        required: false
        default: "preview"
      EAS_PROJECT_ID:
        description: "Optional: EAS Project ID (falls nicht in app.json extra.eas.projectId)"
        required: false
        default: ""

jobs:
  apply-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write files from JSON
        id: write
        run: |
          set -e
          echo '${{ inputs.FILES_JSON }}' > files.json
          python3 - <<'PY'
import os, json, base64
data = json.loads(open("files.json","r",encoding="utf-8").read())
for f in data:
    p = f["path"]; c = f["content"]; d = os.path.dirname(p)
    if d and not os.path.exists(d): os.makedirs(d, exist_ok=True)
    if f.get("encoding") == "base64":
        open(p,"wb").write(base64.b64decode(c))
    else:
        open(p,"w",encoding="utf-8",newline="\n").write(c)
print("Wrote", len(data), "files")
PY
          git status --porcelain

      - name: Commit changes
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: apply automated patch (files json)"
            git push
          fi

      - name: Resolve EAS Project ID
        id: proj
        run: |
          APP_JSON="app.json"
          PID=""
          if [ -f "$APP_JSON" ]; then
            PID=$(jq -r '.expo.extra.eas.projectId // empty' "$APP_JSON" || true)
          fi
          if [ -z "$PID" ]; then
            PID="${{ inputs.EAS_PROJECT_ID }}"
          fi
          echo "pid=$PID" >> $GITHUB_OUTPUT

      - name: Trigger EAS Android Build (optional)
        if: ${{ inputs.BUILD == 'true' && steps.proj.outputs.pid != '' }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EAS_PROJECT_ID: ${{ steps.proj.outputs.pid }}
          EAS_PROFILE: ${{ inputs.EAS_PROFILE }}
        run: |
          if [ -z "$EXPO_TOKEN" ]; then
            echo "Missing EXPO_TOKEN secret" >&2
            exit 1
          fi
          cat > graphql.json <<'EOF'
          {
            "query": "mutation CreateBuild($input: CreateBuildInput!) { createBuild(input: $input) { build { id status platform } } }",
            "variables": {
              "input": {
                "appId": "__APP_ID__",
                "platform": "ANDROID",
                "profile": "__PROFILE__"
              }
            }
          }
          EOF
          sed -i "s/__APP_ID__/${EAS_PROJECT_ID}/" graphql.json
          sed -i "s/__PROFILE__/${EAS_PROFILE}/" graphql.json
          curl -f -sS -H "Content-Type: application/json" -H "Authorization: Bearer ${EXPO_TOKEN}" \
            -X POST --data @graphql.json https://api.expo.dev/v2/graphql | tee build_trigger_response.json
          BUILD_ID=$(cat build_trigger_response.json | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['data']['createBuild']['build']['id'])")
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT

      - name: Poll build status
        if: ${{ inputs.BUILD == 'true' && steps.proj.outputs.pid != '' }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          BUILD_ID=$(cat build_trigger_response.json | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['data']['createBuild']['build']['id'])")
          echo "Polling ${BUILD_ID} ..."
          for i in $(seq 1 60); do
            curl -f -sS -H "Content-Type: application/json" -H "Authorization: Bearer ${EXPO_TOKEN}" \
              -X POST --data "{\"query\":\"query BuildById($id: ID!) { build(id: $id) { id status artifacts { buildUrl } } }\",\"variables\":{\"id\":\"${BUILD_ID}\"}}" \
              https://api.expo.dev/v2/graphql | tee build_status.json
            STATUS=$(cat build_status.json | python3 -c "import sys,json; d=json.load(sys.stdin); print(d['data']['build']['status'])")
            echo "Status: ${STATUS}"
            if [ "${STATUS}" = "FINISHED" ] ; then
              URL=$(cat build_status.json | python3 -c "import sys,json; d=json.load(sys.stdin); print((d['data']['build']['artifacts'] or {}).get('buildUrl',''))")
              echo "APK URL: ${URL}" >> $GITHUB_STEP_SUMMARY
              exit 0
            elif [ "${STATUS}" = "ERRORED" ]; then
              echo "Build failed"; cat build_status.json; exit 1
            fi
            sleep 10
          done
          echo "Timeout waiting for build"; exit 1
